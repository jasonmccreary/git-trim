#!/usr/bin/env bash

# Use git-sh-setup, similar to git-recommand
# https://www.kernel.org/pub/software/scm/git/docs/git-sh-setup.html
OPTIONS_STUCKLONG=true
OPTIONS_SPEC="\
git trim [options]

Removes merged, pruned, untracked, and stale branches within a repository.
https://github.com/jasonmccreary/git-trim/
--
  Available options are:
all!              remove all local branches, except the current branch
dry-run!          prints branches to output instead of deleting theme
m,merged!         remove local branches already merged into the current branch
p,pruned!         remove local branches where its remote branch no longer exists
r,remote!         remove remote branches instead of local branches
reset=?           remove all local branches except those existing on remote (default: origin)
s,stale!          remove local branches without commits in the last 3 months
t,tracked!        remove the tracking branch from remote
u,untracked!      remove local branches not tracking a remote branch
"

SUBDIRECTORY_OK='Yes' . "$(git --exec-path)/git-sh-setup"


# Functions
filter_branches() {
  local exclude=( $(git config gt.exclude) )

  if [ ${#exclude} -eq 0 ]; then
    echo "$@"
    return
  fi

  local branches=()

  for branch in "$@"; do
    if [ $remote -eq 1 ]; then
      for excluded in "${exclude[@]}"; do
        if [[ "$branch" == *"/$excluded" ]]; then
          continue 2
        fi
      done

      branches+=($branch)
    else
      [[ ! " ${exclude[*]} " =~ " $branch " ]] && branches+=($branch)
    fi
  done

  echo "${branches[*]}"
}

prune_all() {
  git fetch --all -p > /dev/null 2>&1
}

remove_tracking_branch() {
  local remote=$(git config "branch.${1}.remote")

  if [ -z "$remote" ]; then
    return
  fi

  local upstream_branch_full_name=$(git config "branch.$1.merge")
  local upstream_branch=${upstream_branch_full_name#"refs/heads/"}

  remove_remote_branch $remote $upstream_branch
}

remove_remote_branch() {
  if [ $dry_run -eq 1 ]; then
    echo "$2 (on $1) will be trimmed."
  else
    git push -d $1 $2 >/dev/null 2>&1
    if [ $? -eq 0 ]; then
      echo "Deleted branch $2 (on $1)."
    fi
  fi
}

remove_local_branch() {
  if [ $dry_run -eq 1 ]; then
    echo "$1 will be trimmed."
  else
    git branch -D $1
  fi
}

# Defaults
all=0
dry_run=0
merged=0
pruned=0
stale=0
tracked=0
untracked=0
remote=0
reset=''
current_branch=$(git symbolic-ref -q --short HEAD)
[ $# != 1 ] || pruned=1


# Parse options
while [ $# != 0 ]; do
  case "$1" in
  --all) all=1;;
  --stale) stale=1;;
  --merged) merged=1;;
  --pruned) pruned=1;;
  --tracked) tracked=1;;
  --untracked) untracked=1;;
  --remote) remote=1;;
  --reset=*) reset="${1#*=}";;
  --reset) reset='origin';;
  --dry-run) dry_run=1;;
  --) ;;
  esac
  shift
done


# all
if [ $all -eq 1 ]; then
  while true; do
    read -p "Are you sure you want to remove all branches? " choice
    case $(echo $choice | tr '[A-Z]' '[a-z]') in
      y|yes) break;;
      *) exit;;
    esac
  done

  command='git branch'
  if [ $remote -eq 1 ]; then
    prune_all
    command="$command -a"
  fi

  branches=( $($command | grep -vF $current_branch) )
  branches=( $(filter_branches "${branches[@]}") )

  if [ ${#branches} -eq 0 ]; then
    echo "No branches need to be trimmed."
    exit 0
  fi

  for branch in "${branches[@]}"; do
    if [ $remote -eq 1 ]; then
      if [ "${branch:0:8}" == "remotes/" ]; then
        name="${branch:8}"
        remove_remote_branch ${name%/*} ${name#*/}
      fi
    else
      remove_local_branch $branch

      if [ $tracked -eq 1 ]; then
        remove_tracking_branch $branch
      fi
    fi
  done
fi


# merged
if [ $merged -eq 1 ]; then
  command='git branch'
  if [ $remote -eq 1 ]; then
    prune_all
    command="$command -r"
  fi

  branches=( $($command --merged | grep -vF $current_branch ) )
  branches=( $(filter_branches "${branches[@]}") )

  if [ ${#branches} -eq 0 ]; then
    echo "There are no merged branches to trim."
    exit 0
  fi

  for branch in "${branches[@]}"; do
    if [ $remote -eq 1 ]; then
      remove_remote_branch ${branch%/*} ${branch#*/}
    else
      if [ $tracked -eq 1 ]; then
        remove_tracking_branch $branch
      fi

      remove_local_branch $branch
    fi
  done
fi


# pruned
if [ $pruned -eq 1 ]; then
  prune_all
  branches=( $(LANG=C git branch -vv | awk '/: gone]/{print $1}') )
  branches=( $(filter_branches "${branches[@]}") )

  if [ ${#branches} -eq 0 ]; then
    echo "There are no local branches to trim."
    exit 0
  fi

  for branch in "${branches[@]}"; do
    remove_local_branch $branch
  done
fi


# stale
if [ $stale -eq 1 ]; then
  command='git branch'
  if [ $remote -eq 1 ]; then
    prune_all
    command="$command -r"
  fi

  branches=( $($command | grep -v "^\*") )
  branches=( $(filter_branches "${branches[@]}") )

  if [ ${#branches} -eq 0 ]; then
    echo "There are no stale branches to trim."
    exit 0
  fi

  for branch in "${branches[@]}"; do
    if [ -z $(git log -1 -s --since="3 months ago" $branch) ]; then
      if [ $remote -eq 1 ]; then
        remove_remote_branch ${branch%/*} ${branch#*/}
      else
        remove_local_branch $branch
      fi
    fi
  done
fi


# untracked
if [ $untracked -eq 1 ]; then
  branches=( $(git branch --format='%(if)%(upstream)%(then)%(else)%(refname:short)%(end)' | awk NF) )
  branches=( $(filter_branches "${branches[@]}") )

  if [ ${#branches} -eq 0 ]; then
    echo "There are no untracked branches to trim."
    exit 0
  fi

  for branch in "${branches[@]}"; do
    if [ "$branch" != "$current_branch" ]; then
      remove_local_branch $branch
    fi
  done
fi


# reset
if [ -n "$reset" ]; then
  while true; do
    read -p "Are you sure you want to remove all local branches not on $reset? " choice
    case $(echo $choice | tr '[A-Z]' '[a-z]') in
      y|yes) break;;
      *) exit;;
    esac
  done

  git fetch -p $reset > /dev/null 2>&1

  remote_branches=( $(git ls-remote --heads origin | cut -f 2) )
  local_branches=( $(git branch | grep -vF $current_branch) )
  branches=()

  for branch in "${local_branches[@]}"; do
    [[ ! " ${remote_branches[*]} " =~ " refs/heads/${branch} " ]] && branches+=($branch)
  done

  branches=( $(filter_branches "${branches[@]}") )

  if [ ${#branches} -eq 0 ]; then
    echo "No branches need to be trimmed."
    exit 0
  fi

  for branch in "${branches[@]}"; do
    git branch -D $branch
  done
fi


exit 0
